Code Description:
The code below uses Luhn Algorithm to detect invalid and valid credit card numbers.

What is the Luhn Algorithm?
Answer: The Luhn algorithm is a series of mathematical calculations used to validate certain identification numbers, e.g. credit card numbers.
The calculations in the Luhn algorithm can be broken down as the following steps:

1.	Starting from the farthest digit to the right, AKA the check digit, iterate to the left.
2.	As you iterate to the left, every other digit is doubled (the check digit is not doubled). If the number is greater than 9 after doubling, subtract 9 from its value.
3.	Sum up all the digits in the credit card number.
4.	If the sum modulo 10 is 0 (if the sum divided by 10 has a remainder of 0) then the number is valid, otherwise, itâ€™s invalid.

Code:

// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [
  valid1,
  valid2,
  valid3,
  valid4,
  valid5,
  invalid1,
  invalid2,
  invalid3,
  invalid4,
  invalid5,
  mystery1,
  mystery2,
  mystery3,
  mystery4,
  mystery5,
];

// Functions:

const validateCred = (arry) => {
  let reversedNumbers = [];
  let newArray = [];
  let sumArrayResults = [];
  for (let i = 0; i < arry.length; i++) {
    reversedNumbers.push(arry[i].slice().reverse());
  }
  // return reversedNumbers;

  for (let j = 0; j < reversedNumbers.length; j++) {
    let newSubArray = [];
    for (let k = 0; k < reversedNumbers[j].length; k++) {
      if (k % 2 !== 0) {
        if (reversedNumbers[j][k] * 2 > 9) {
          newSubArray.push(reversedNumbers[j][k] * 2 - 9);
        } else {
          newSubArray.push(reversedNumbers[j][k] * 2);
        }
      } else {
        newSubArray.push(reversedNumbers[j][k]);
      }
    }
    newArray.push(newSubArray);
  }
  // return newArray;

  for (let l = 0; l < newArray.length; l++) {
    let sum = 0;
    for (let m = 0; m < newArray[l].length; m++) {
      sum = sum + newArray[l][m];
      }
    if (sum % 10 === 0) {
      sumArrayResults.push(true);
    } else {
      sumArrayResults.push(false);
    }
  }
  return sumArrayResults;
};
let invalidCardNumbers = [];
const findInvalidCards = (arraysInvalid) => {
  let indices = [];
  let compare = validateCred(arraysInvalid);
  //return compare;
  for (let m = 0; m < compare.length; m++) {
    if (compare[m] === false) {
      indices.push(m);
    }
  }
  //return indices;
  for (let x = 0; x < indices.length; x++) {
    invalidCardNumbers.push(arraysInvalid[indices[x]]);
  }
  return invalidCardNumbers;
};

const idInvalidCardCompanies = (invalidArrayOfNumbers) => {
  let companiesArray = [];
  for (let y = 0; y < invalidArrayOfNumbers.length; y++) {
    if (
      invalidArrayOfNumbers[y][0] !== 3 &&
      invalidArrayOfNumbers[y][0] !== 4 &&
      invalidArrayOfNumbers[y][0] !== 5 &&
      invalidArrayOfNumbers[y][0] !== 6
    ) {
      console.log("Company not found");
}
    if (invalidArrayOfNumbers[y][0] === 3) {
      companiesArray.push("Amex");
    } else if (invalidArrayOfNumbers[y][0] === 4) {
      companiesArray.push("Visa");
    } else if (invalidArrayOfNumbers[y][0] === 5) {
      companiesArray.push("Mastercard");
    } else if (invalidArrayOfNumbers[y][0] === 6) {
      companiesArray.push("Discover");
    }
  }
  //return companiesArray;
  let uniqueChars = [];
  companiesArray.forEach(c => {
    if (!uniqueChars.includes(c)) {
      uniqueChars.push(c);
    }
  })
  return uniqueChars;
};

console.log(validateCred(batch));
console.log(findInvalidCards(batch));
console.log(idInvalidCardCompanies(invalidCardNumbers));

